#!/usr/bin/bash
# Copyright (c) 2025 dare3path
# Licensed under the Apache License 2.0 (see LICENSE-APACHE.txt)
# Licensed under the Business Source License 1.1 (see LICENSE-BSL.txt)
# Licensed under the MIT License (see LICENSE-MIT.txt)
# Use any one of these licenses at your option.

# Set your desired validity in days for how long the server certificate(which contains the public key) is valid.
SERVER_CERT_DAYS=365
set -ex
#Sign the Server’s CSR with the Local CA: 
#openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -sha256
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days "$SERVER_CERT_DAYS" -sha256 -extfile san.cnf -extensions arbitrary_name_2
#openssl x509 is for manipulating existing certificates or signing CSRs, focusing on certificate output. It doesn’t need the full [req] section (e.g., default_md, prompt), only specific extensions, so it uses -extfile/-extensions to target those.
#This is an OpenSSL architectural quirk: x509 commands are more limited in config parsing, forcing the use of -extfile for extensions.

#    -CA ca.crt: Uses the CA’s certificate.
#    -CAkey ca.key: Uses the CA’s private key to sign.
#    -CAcreateserial: Generates a serial number file (ca.srl) for tracking.
#    -days 365: Server cert valid for 1 year.
#    Output:
#        server.crt—the server’s signed public certificate.
#        ca.srl—a serial number file (can be ignored or reused for future certs).

#this will work:
openssl verify -CAfile ca.crt server.crt
#XXX: this will NOT work:
#openssl verify -CAfile server.crt server.crt
echo "Done"
